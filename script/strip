#!/bin/bash

_cleanup_dir() {
	pushd ${BUILDDIR} >/dev/null
	rm -rf "usr/"{,local/}lib/python*/{test,ctypes/test,distutils/tests,idlelib/idle_test,lib2to3/tests,sqlite3/test,tkinter/test,unittest/test}
	rm -rf "usr"{,local}/share/info root/.{cache,wget-hsts}
	sed -i '/^\/root\/.\(wget-hsts\s\|cache\/\)/d' ${FILE_DIR#/}/*

	find "usr" -type f -name '*.la' -delete
	find "var/cache" ! -type d -delete
	find "etc" -name ld.so.cache\* -delete

	if [ -d "var/lib/systemd" ]; then
		find "var/lib/systemd" ! -type d -delete
	fi
	popd >/dev/null
}

_strip_symbol() {
	local DEST="${BUILDDIR}/usr"
	local STRIP_BINARIES="--strip-all"
	local STRIP_SHARED="--strip-unneeded"
	local STRIP_STATIC="--strip-debug"

	local l d
	local dest="${BUILDDIR}/debug_symbol"
	pushd ${BUILDDIR} >/dev/null
	while IFS= read -rd '' l; do
		d="$(dirname $l)"
		mkdir -p "$dest/$d"
		mv "$l" "$dest/$d"
	done < <(find "usr" ! -type d -name "*.dbg" -print0)
	cp -a usr "$dest"
	popd >/dev/null

	strip_file() {
		local binary=$1; shift
		local tempfile=$(mktemp "$binary.XXXXXX")
		if strip "$@" "$binary" -o "$tempfile"; then
			cat "$tempfile" > "$binary"
		fi
		rm -f "$tempfile"
	}

	local binary strip_flags
	find "${DEST}" -type f -perm -u+w -print0 2>/dev/null | while IFS= read -rd '' binary ; do
		case "$(LC_ALL=C readelf -h "$binary" 2>/dev/null)" in
			*Type:*'DYN (Shared object file)'*) # Libraries (.so) or Relocatable binaries
				strip_flags="$STRIP_SHARED";;
			*Type:*'DYN (Position-Independent Executable file)'*) # Relocatable binaries
				strip_flags="$STRIP_SHARED";;
			*Type:*'EXEC (Executable file)'*) # Binaries
				strip_flags="$STRIP_BINARIES";;
			*Type:*'REL (Relocatable file)'*) # Libraries (.a) or objects
				if ar t "$binary" &>/dev/null; then # Libraries (.a)
					strip_flags="$STRIP_STATIC"
				elif [[ $binary = *'.ko' || $binary = *'.o' ]]; then # Kernel module or object file
					strip_flags="$STRIP_SHARED"
				else
					continue
				fi
				;;
			*)
				continue ;;
		esac
		pushd /tmp >/dev/null
		strip_file "$binary" ${strip_flags}
		popd >/dev/null
	done
}

_remove_staticlib() {
	printf "::Removing static library files..."
	local l d
	local dest="${BUILDDIR}/staticlibs"
	pushd ${BUILDDIR} >/dev/null
	while IFS= read -rd '' l; do
		if [[ -f "${l%.a}.so" || -h "${l%.a}.so" ]]; then
			d="$(dirname $l)"
			mkdir -p "$dest/$d"
			mv "$l" "$dest/$d"
		fi
	done < <(find "usr" ! -type d -name "*.a" -print0)
	printf 'done.\n'
	popd >/dev/null
}

docmd() {
	[ -z ${BUILDDIR} ] && return
	[ -d ${BUILDDIR} ] || return 0

	echo '::Removing Python test files and Tools directory...'
	_cleanup_dir

	_remove_staticlib
	echo "::Remove all symbol and relocation information from binaries and libraries, in '${BUILDDIR}/usr'..."
	_strip_symbol
	echo ":: Done."
}

docmd "$@"
