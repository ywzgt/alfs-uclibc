Fri Mar 29 17:33:11 UTC 2024
KB: 1250788	/

libtoolize: putting auxiliary files in '.'.
libtoolize: linking file './ltmain.sh'
libtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'm4'.
libtoolize: linking file 'm4/libtool.m4'
libtoolize: linking file 'm4/ltoptions.m4'
libtoolize: linking file 'm4/ltsugar.m4'
libtoolize: linking file 'm4/ltversion.m4'
libtoolize: linking file 'm4/lt~obsolete.m4'
configure.ac:9: installing './compile'
configure.ac:10: installing './config.guess'
configure.ac:10: installing './config.sub'
configure.ac:5: installing './install-sh'
configure.ac:5: installing './missing'
Makefile.am: installing './INSTALL'
Makefile.am: installing './depcomp'
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a race-free mkdir -p... /usr/bin/mkdir -p
checking for gawk... gawk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether the compiler supports GNU C... yes
checking whether gcc accepts -g... yes
checking for gcc option to enable C11 features... none needed
checking whether gcc understands -c and -o together... yes
checking whether make supports the include directive... yes (GNU style)
checking dependency style of gcc... gcc3
checking build system type... x86_64-pc-linux-uclibc
checking host system type... x86_64-pc-linux-uclibc
checking how to print strings... printf
checking for a sed that does not truncate output... /usr/bin/sed
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for fgrep... /usr/bin/grep -F
checking for ld used by gcc... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... yes
checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
checking the name lister (/usr/bin/nm -B) interface... BSD nm
checking whether ln -s works... yes
checking the maximum length of command line arguments... 1572864
checking how to convert x86_64-pc-linux-uclibc file names to x86_64-pc-linux-uclibc format... func_convert_file_noop
checking how to convert x86_64-pc-linux-uclibc file names to toolchain format... func_convert_file_noop
checking for /usr/bin/ld option to reload object files... -r
checking for file... file
checking for objdump... objdump
checking how to recognize dependent libraries... pass_all
checking for dlltool... no
checking how to associate runtime and link libraries... printf %s\n
checking for ar... ar
checking for archiver @FILE support... @
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for a working dd... /usr/bin/dd
checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
checking for mt... no
checking if : is a manifest tool... no
checking for stdio.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for strings.h... yes
checking for sys/stat.h... yes
checking for sys/types.h... yes
checking for unistd.h... yes
checking for dlfcn.h... yes
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... no
checking for gcc option to produce PIC... -fPIC -DPIC
checking if gcc PIC flag -fPIC -DPIC works... yes
checking if gcc static flag -static works... yes
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking whether -lc should be explicitly linked in... no
checking dynamic linker characteristics... GNU/Linux ld.so
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... yes
checking whether to build static libraries... yes
checking for assert.h... yes
checking for dirent.h... yes
checking for errno.h... yes
checking for fcntl.h... yes
checking for stdlib.h... (cached) yes
checking for string.h... (cached) yes
checking for unistd.h... (cached) yes
checking for sys/param.h... yes
checking for sys/stat.h... (cached) yes
checking for gcc options needed to detect all undeclared functions... none needed
checking whether MAX is declared... yes
checking whether UINTMAX_MAX is declared... no
checking for dirfd... yes
checking for DIR.dd_fd... no
checking for DIR.d_fd... no
checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating Makefile
config.status: creating musl-fts.pc
config.status: creating config.h
config.status: executing depfiles commands
config.status: executing libtool commands
make  all-am
make[1]: Entering directory '/sources/musl-fts-1.2.7'
/bin/sh ./libtool  --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I.   -DNDEBUG  -march=x86-64-v3 -mtune=haswell -Os -pipe -fno-plt -fPIC -fstack-clash-protection -ffunction-sections -fdata-sections -MT fts.lo -MD -MP -MF .deps/fts.Tpo -c -o fts.lo fts.c
libtool: compile:  gcc -DHAVE_CONFIG_H -I. -DNDEBUG -march=x86-64-v3 -mtune=haswell -Os -pipe -fno-plt -fPIC -fstack-clash-protection -ffunction-sections -fdata-sections -MT fts.lo -MD -MP -MF .deps/fts.Tpo -c fts.c  -fPIC -DPIC -o .libs/fts.o
libtool: compile:  gcc -DHAVE_CONFIG_H -I. -DNDEBUG -march=x86-64-v3 -mtune=haswell -Os -pipe -fno-plt -fPIC -fstack-clash-protection -ffunction-sections -fdata-sections -MT fts.lo -MD -MP -MF .deps/fts.Tpo -c fts.c -o fts.o >/dev/null 2>&1
mv -f .deps/fts.Tpo .deps/fts.Plo
/bin/sh ./libtool  --tag=CC   --mode=link gcc  -march=x86-64-v3 -mtune=haswell -Os -pipe -fno-plt -fPIC -fstack-clash-protection -ffunction-sections -fdata-sections  -Wl,-O2,--sort-common,--as-needed,-z,relro,-z,now,--gc-sections,--compress-debug-sections=zstd -o libfts.la -rpath /usr/lib fts.lo  
libtool: link: gcc -shared  -fPIC -DPIC  .libs/fts.o    -march=x86-64-v3 -mtune=haswell -Os -Wl,-O2 -Wl,--sort-common -Wl,--as-needed -Wl,-z -Wl,relro -Wl,-z -Wl,now -Wl,--gc-sections -Wl,--compress-debug-sections=zstd   -Wl,-soname -Wl,libfts.so.0 -o .libs/libfts.so.0.0.0
libtool: link: (cd ".libs" && rm -f "libfts.so.0" && ln -s "libfts.so.0.0.0" "libfts.so.0")
libtool: link: (cd ".libs" && rm -f "libfts.so" && ln -s "libfts.so.0.0.0" "libfts.so")
libtool: link: ar cr .libs/libfts.a  fts.o
libtool: link: ranlib .libs/libfts.a
libtool: link: ( cd ".libs" && rm -f "libfts.la" && ln -s "../libfts.la" "libfts.la" )
make[1]: Leaving directory '/sources/musl-fts-1.2.7'
make[1]: Entering directory '/sources/musl-fts-1.2.7'
 /usr/bin/mkdir -p '/usr/include'
 /usr/bin/mkdir -p '/usr/lib/pkgconfig'
 /usr/bin/mkdir -p '/usr/lib'
 /bin/sh ./libtool   --mode=install /usr/bin/install -c   libfts.la '/usr/lib'
 /usr/bin/install -c -m 644 fts.h '/usr/include'
 /usr/bin/install -c -m 644 musl-fts.pc '/usr/lib/pkgconfig'
libtool: install: /usr/bin/install -c .libs/libfts.so.0.0.0 /usr/lib/libfts.so.0.0.0
libtool: install: (cd /usr/lib && { ln -s -f libfts.so.0.0.0 libfts.so.0 || { rm -f libfts.so.0 && ln -s libfts.so.0.0.0 libfts.so.0; }; })
libtool: install: (cd /usr/lib && { ln -s -f libfts.so.0.0.0 libfts.so || { rm -f libfts.so && ln -s libfts.so.0.0.0 libfts.so; }; })
libtool: install: /usr/bin/install -c .libs/libfts.lai /usr/lib/libfts.la
libtool: install: /usr/bin/install -c .libs/libfts.a /usr/lib/libfts.a
libtool: install: chmod 644 /usr/lib/libfts.a
libtool: install: ranlib /usr/lib/libfts.a
libtool: finish: PATH="/usr/bin:/usr/sbin:/sbin" ldconfig -n /usr/lib
----------------------------------------------------------------------
Libraries have been installed in:
   /usr/lib

If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the '-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the 'LD_LIBRARY_PATH' environment variable
     during execution
   - add LIBDIR to the 'LD_RUN_PATH' environment variable
     during linking
   - use the '-Wl,-rpath -Wl,LIBDIR' linker flag

See any operating system documentation about shared libraries for
more information, such as the ld(1) and ld.so(8) manual pages.
----------------------------------------------------------------------
make[1]: Leaving directory '/sources/musl-fts-1.2.7'
removed '/usr/lib/pkgconfig/musl-fts.pc'
'musl-fts.pc' -> '/usr/lib/pkgconfig/musl-fts.pc'
removed '/usr/lib/libfts.la'


CFLAGS:: -march=x86-64-v3 -mtune=haswell -Os -pipe -fno-plt -fPIC -fstack-clash-protection -ffunction-sections -fdata-sections
CXXFLAGS:: -march=x86-64-v3 -mtune=haswell -Os -pipe -fno-plt -fPIC -fstack-clash-protection -ffunction-sections -fdata-sections -Wp,-D_GLIBCXX_ASSERTIONS
CPPFLAGS:: -DNDEBUG
LDFLAGS:: -Wl,-O2,--sort-common,--as-needed,-z,relro,-z,now,--gc-sections,--compress-debug-sections=zstd


Fri Mar 29 17:33:16 UTC 2024

Totalseconds: 5

KB: 1254204	/

